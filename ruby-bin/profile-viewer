#!/usr/bin/env ruby -w

require "webrick"
require "json"
require "cgi"
require "optparse"

HTTP_ROOT = File.expand_path File.join(__dir__, "..", "dist")

# This came from src/app-logic/constants.js
# export const PROFILER_SERVER_ORIGIN = 'http://localhost:5252';
PORT = 5252

class Source < WEBrick::HTTPServlet::AbstractServlet
  def initialize server, valid_files
    super(server)
    @valid_files = valid_files
  end

  def do_GET request, response
    file = request.path[/(?<=^\/source).*/]
    if @valid_files.include? file
      response.status = 200
      response['Content-Type'] = 'text/plain'
      response.body = File.binread(file)
    else
      response.status = 404
      response['Content-Type'] = 'text/plain'
      response.body = "Not Found"
    end
  end
end

class GetIndex < WEBrick::HTTPServlet::AbstractServlet
  def do_GET request, response
    response.status = 200
    response['Content-Type'] = 'text/html'
    response.body = File.binread(File.join(HTTP_ROOT, "index.html"))
  end
end

class Profile < WEBrick::HTTPServlet::AbstractServlet
  def initialize server, profile, parsed_profile
    super(server)
    @profile = profile
    @parsed_profile = parsed_profile
  end

  def do_GET request, response
    response.status = 200
    response['Content-Type'] = 'text/html'
    response.body = JSON.dump(@parsed_profile)
  end
end

o = OptionParser.new do |opts|
  opts.banner = "Usage: profile-viewer profile.json"

  opts.on("-v", "Show version") do |v|
    require_relative "profile-viewer-version"
    puts "Profile Viewer Version: #{ProfileViewer::VERSION}"
    puts
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end
o.parse!

unless ARGV[0]
  $stderr.puts o
  exit(2)
end

unless File.exist?(ARGV[0])
  $stderr.puts "no such file #{ARGV[0]}"
  $stderr.puts
  $stderr.puts o
  exit(2)
end

server = WEBrick::HTTPServer.new :Port => PORT,
  :DocumentRoot => HTTP_ROOT,
  :StartCallback => lambda {
    should_get = "http://localhost:#{PORT}/from-url/" + CGI.escape("http://localhost:#{PORT}/profile")
    system("open #{should_get}")
  }

trap 'INT' do server.shutdown end

server.mount "/from-url", GetIndex

profile = ARGV[0]
if profile
  valid_files = Set.new
  full_path = File.expand_path profile
  parsed_file = JSON.parse File.read full_path
  parsed_file["threads"].each do |thread|
    thread["stringArray"].map! do |str|
      if str.start_with?("/") && File.exist?(str)
        valid_files << str
        "http://localhost:#{PORT}/source#{str}"
      else
        str
      end
    end
  end

  server.mount "/profile", Profile, full_path, parsed_file
  server.mount "/source", Source, valid_files
end

server.start

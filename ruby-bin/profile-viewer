#!/usr/bin/env ruby -w

require "webrick"
require "json"
require "cgi"

HTTP_ROOT = File.expand_path File.join(__dir__, "..", "dist")

# This came from src/app-logic/constants.js
# export const PROFILER_SERVER_ORIGIN = 'http://localhost:5252';
PORT = 5252

profile_paths = []
server = WEBrick::HTTPServer.new :Port => PORT,
  :DocumentRoot => HTTP_ROOT,
  :StartCallback => lambda {
    profile_paths.each do |path|
      should_get = "http://localhost:#{PORT}/from-url/" + CGI.escape("http://localhost:#{PORT}#{path}")
      system("open #{should_get}")
    end
  }

class Source < WEBrick::HTTPServlet::AbstractServlet
  def initialize server, valid_files
    super(server)
    @valid_files = valid_files
  end

  def do_GET request, response
    file = request.path[/(?<=^\/source).*/]
    if @valid_files.include? file
      response.status = 200
      response['Content-Type'] = 'text/plain'
      response.body = File.binread(file)
    else
      response.status = 404
      response['Content-Type'] = 'text/plain'
      response.body = "Not Found"
    end
  end
end

class GetIndex < WEBrick::HTTPServlet::AbstractServlet
  def do_GET request, response
    response.status = 200
    response['Content-Type'] = 'text/html'
    response.body = File.binread(File.join(HTTP_ROOT, "index.html"))
  end
end

class Profile < WEBrick::HTTPServlet::AbstractServlet
  def initialize server, profile, parsed_profile
    super(server)
    @profile = profile
    @parsed_profile = parsed_profile
  end

  def do_GET request, response
    response.status = 200
    response['Content-Type'] = 'text/html'
    response.body = JSON.dump(@parsed_profile)
  end
end

trap 'INT' do server.shutdown end

server.mount "/from-url", GetIndex

valid_files = Set.new

ARGV.each.with_index do |profile, index|
  full_path = File.expand_path profile
  parsed_file = JSON.parse File.read full_path
  parsed_file["threads"].each do |thread|
    thread["stringArray"].map! do |str|
      if str.start_with?("/") && File.exist?(str)
        valid_files << str
        "http://localhost:#{PORT}/source#{str}"
      else
        str
      end
    end
  end

  uri_path = "/profile#{index unless ARGV.size == 1}"
  $stderr.puts "Mounting #{full_path} at #{uri_path}"
  server.mount uri_path, Profile, full_path, parsed_file
  profile_paths << uri_path
end

unless valid_files.empty?
  server.mount "/source", Source, valid_files
end

server.start
